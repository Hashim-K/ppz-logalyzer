# PPZ-Logalyzer Docker Compose Configuration
# Optimized for Ubuntu 24.04.2 LTS VPS deployment with Plesk Docker proxy rules

services:
  # PostgreSQL Database - Ubuntu 24.04 compatible
  database:
    image: postgres:16
    container_name: ppz-logalyzer-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ppz_logalyzer
      POSTGRES_USER: ppz_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_change_in_production}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ppz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ppz_user -d ppz_logalyzer"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Resource limits for VPS deployment
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for caching and sessions - Ubuntu 24.04 compatible
  redis:
    image: redis:7
    container_name: ppz-logalyzer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ppz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    # Resource limits for VPS deployment
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Rust Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ppz-logalyzer-backend
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://ppz_user:${DB_PASSWORD:-dev_password_change_in_production}@database:5432/ppz_logalyzer
      REDIS_URL: redis://redis:6379
      
      # Application configuration
      RUST_LOG: ${RUST_LOG:-info}
      PORT: 8000
      HOST: 0.0.0.0
      
      # File processing configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-104857600} # 100MB
      UPLOAD_DIR: /app/uploads
      PROCESSED_DIR: /app/processed
      CACHE_DIR: /app/cache
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-development_secret_change_in_production}
      
      # Monitoring
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
      PROMETHEUS_PORT: 9090
    volumes:
      - uploads:/app/uploads
      - processed:/app/processed
      - cache:/app/cache
      - logs:/app/logs
    ports:
      - "8000:8000"  # Backend API exposed for Plesk Docker proxy rules
      - "9090:9090"  # Prometheus metrics (optional - can be removed if not needed)
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ppz-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Resource limits for VPS deployment
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ppz-logalyzer-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}
    volumes:
      - uploads:/app/uploads:ro  # Read-only access to uploads
    ports:
      - "3000:3000"  # Frontend will be exposed via Plesk Docker proxy rules
    depends_on:
      - backend
    networks:
      - ppz-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Resource limits for VPS deployment
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ppz-logalyzer-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - ppz-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ppz-logalyzer-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - ppz-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  processed:
    driver: local
  cache:
    driver: local
  logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network for service communication
networks:
  ppz-network:
    driver: bridge
